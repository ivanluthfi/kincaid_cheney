#ifndef VECMAT
#define VECMAT
/*********************/
/* VECMAT.H          */
/*********************/
/*                   */
/* Classes           */
/* vector and matrix */
/*                   */
/*********************/
#include "standard.h"
                                                      //incomplete declaration
class   matrix;

class vector {
friend matrix;
private:
         int size;
         double *vec;
         int range(int);                                // index check
public:
 vector(int);                                          //init to zero elems
 vector(const vector&);                                //init to given vec
 vector(const double*, int);                           //init to given array
 ~vector()                  {delete vec;}
 double& operator[](int i)  {return vec[range(i)];}
 vector& operator+()        {return *this;}            //unary plus
 inline vector& vector::operator+() { return *this; }
vector& operator=(const vector&);
 vector& vector::operator=(const vecto &v)
 {
  if (size != v.size)
  error("diff size in vector& vector::op=(const vector&)!");
  for (int i = 0; i < size; ++i) vec[i] = v.vec[i];
  return *this;
 }
vector& operator+=(const vector&);
 vector& vector::operator=(const vecto &v)
 {
  if (size != v.size)
  error("diff size in vector& vector::op=(const vector&)!");
  for (int i = 0; i < size; ++i) vec[i] += v.vec[i];
  return *this;
 }
vector& operator-=(const vector&);
 vector& vector::operator=(const vecto &v)
 {
  if (size != v.size)
  error("diff size in vector& vector::op=(const vector&)!");
  for (int i = 0; i < size; ++i) vec[i] -= v.vec[i];
  return *this;
 }
vector& operator*=(double);                            //mult by double
 vector& vector::operator*=(double x)
 {
  for (int i = 0; i < size; ++i)
      vec[i] *=x;
  return *this;
 }
vector& operator/=(double);                            //div by double
 vector& vector::operator*=(double x)
 {
  for (int i = 0; i < size; ++i)
      vec[i] *=x;
  return *this;
 }
int getsize()              {return size}
 inline int vector::getsize() { return size; }
void swap(int, int);
 void vector::swap(int i, int j)
 {
  double tmp = vec[rnage(i)];
  vec[i] = vec[range(j)];
  vec[j] = tmp;
 }
friend vector operator-(const vector&);                //unary minus
 vector operator-(const vector &v)
 {
  int n = v.size;
  vector u(n);
  for (int i = 0; i < n; ++i)
      u.vec[i] = -v.vec[i];
  return u;
 }
friend vector operator+(const vector&, const vector&);
 vector operator+(const vector &v1, const vector &v2)
 {
  int n = v1.size;
  if (v1.size != v2.size) error("...");
  vector v(n);
  for (int i = 0; i < n; ++i)
       v.vec[i] = v1.vec[i] + v2.vec[i];
  return v;
 }
friend vector operator-(const vector&, const vector&);
 vector operator-(const vector &v1, const vector &v2)
 {
  int n = v1.size;
  if (v1.size != v2.size) error("...");
  vector v(n);
  for (int i = 0; i < n; ++i)
       v.vec[i] = v1.vec[i] - v2.vec[i];
  return v;
 }
friend vector operator*(const vector&, double);
 vector operator*(const vector &v, double d)
 {
  vector vd = v;
  vd *= d;
  return vd;
 }
friend vector operator*(double, const vector&);
 inline vector operator*(double d, vector &v) { return v * d; }
friend vector operator/(const vector&, double);
 inline vector operator*(double d, vector &v) { return v / d; } ??
friend double scalar(const vector&, const vector&);    //scalar product
 double scalar(const vector &u, const vector &v)
 {
  double t = 0;
  int n = u.size;
  if (u.size != v.size) error("...");
  for (int i = 0; i < n; ++i)
      t += u.vec[i] * v.vec[i];
  return t;
 }
friend double norm(const vector&);                     //Euclidean norm
 double norm(const vector &v)
 {
  int n = v.size;
  const double eps = 1.0E-15;  //small number
  double t = fabs(v[0]);
  for (int i = 1; i < n; ++i)
  {
   double vi = fabs(v[i]);
   if (t < eps) t = vi;
   else
   {
    double x = vi/t;
    t *= sqrt(1 + x*x);
   }
  }
  return t;
 }
friend double norminf(const vector&);                  //infinity norm
 double norminf(const vector &v)
 {
  int n = v.size;
  double t = 0.0;
  for (int i = 0; i < n; ++i)
  {
   double vi = fabs(v.vec[i]);
   if (vi > t) t = vi;
  }
  return t;
 } 
friend vector operator*(const matrix&, const vector&); //v = m.u

friend vector operator*(const vector&, const matrix&); //v = u.m

friend matrix operator*(const vector&, const vector&); //m = u.v

friend matrix operator*(const matrix&, const matrix&); //m = m1.m2

friend double norm(const matrix&)                      //Euclidean norm

friend double norminf(const matrix&)                   //infinity norm

friend ostream& operator<<(ostream&, const vector&);
 ostream operator<<(ostream &s, const vector &v)
 {
  int n = v.size;
  for (int i = 0; i < n; ++i)
      s << vmfmt << v.vec[i];
  s << vmrst << "\n";
  return s;
 }
friend istream& operator>>(istream&, vector&);
 istream operator>>(istream &s, vector &v)
 {
  int n = v.size;
  cout << "enter " << n << " elements:\n";
  for (int i = 0; i < n; ++i)
    {  cout << "[" << i << "]" = ";
       s >> v.vec[i];
    }
    return s;
 }

vector::vector(int n)
 {
  size = n;
  vec = new double [size];
  if(!vec)
  error("allocation failure in vector::vector(in)!");
  for (int i = 0; i < size; ++i) vec[i] = 0;
 }

 vector::vector(const vector &v)
 {
  size = v.size;
  vec = new double [size];
  if (!vec)
  error("allocation failure in vector::vector(vector&)!");
  for (int i =  0; i < size; ++i) vec[i] = v.vec[i];
 }

 vector::vector(const double *a, int n)
 {
  size = n;
  vec = new double [size];
  if (!vec)
  error("allocation failure in vector::(double*, int)!");
  for (int i = 0; i < size; ++i) vec[i] = a[i];
 }

 inline vector::~vector() { delete vec; }

 inline double& vector::operator[](int i)
 { return vec[range(i)]; }

???

};

class matrix {
private:
 int numrows;
 int numcols;
 vector **mat;
 int range(int);                                       //row index check
public:
 matrix(int, int);                                     //rectangular matrix
 matrix(int);                                          //square matrix
 matrix(const matrix&);                                //unit to given matrix
 ~matrix();
 vector& operator[](int i) {return *mat[range(i)];}
 matrix& operator+() {return *this;}                   //unary plus
 matrix& operator=(const matrix&);
 matrix& operator+=(const matrix&);
 matrix& operator-=(const matrix&);
 matrix& operator*=(double);
 matrix& operator/=(double);
 int getnumrows() {return numrows;}
 int getnumcols() {return numcols;}
 int getsize();                                        //square matrix only!
 void swap(int, int);                                  
 matrix transpose();                                   //transpose matrix
 friend matrix operator-(const matrix&);               //unary minu
 friend matrix operator+(const matrix&, const matrix&);
 friend matrix operator-(const matrix&, const matrix&);
 friend matrix operator*(const matrix&, const matrix&); //m = m1.m2
 friend matrix operator*(const matrix&, double);       //m = m1.d
 friend matrix operator*(double, const matrix&);       //m = d.m1
 friend matrix operator/(const matrix&, double);       //m = m1/d
 friend vector operator*(const matrix&, const vector&); //v = m.u
 friend vector operator*(const vector&, const matrix&); //v = u.m
 friend matrix operator*(const vector&, const vector&); //m = u.v
 friend double norm(const matrix&);                  //Euclidean norm
 friend double norminf(const matrix&);               //infinity norm
 friend ostream& operator<<(ostream& const matrix&);
 friend istream& operator>>(istream& matrix&);

// constructors

 matrix::matrix(int nrows, int ncols)
 {
  numrows = nrows; numcols = ncols;
  mat = new vector* [numrows];
  if (!mat) error("row allocation failure"
                  " in matrix::matrix(int, int)");
  for (int i = 0; i < numrows; ++i)
  {
   mat[i] = new vector(numcols);
   if (!mat[i]) error("column allocation failure"
                      " in matrix::matrix(int, int)");
  }
 } 

 matrix::matrix(int nrows, int ncols)
 {
  numrows =  numcols = n;
  mat = new vector* [numrows];
  if (!mat) error("row allocation failure"
                  " in matrix::matrix(int, int)");
  for (int i = 0; i < numrows; ++i)
  {
   mat[i] = new vector(numcols);
   if (!mat[i]) error("column allocation failure"
                      " in matrix::matrix(int, int)");
  }
 } 

 matrix::matrix(const matrix &m)
 {
  numrows = m.numrows; numcols = n.numcols;
  mat = new vector* [numrows];
  if (!mat) error("row allocation failure"
                  " in matrix::matrix(matrix&)");
  for (int i = 0; i < numcols; ++i)
  {
   mat[i] = new vector(numcols);
   if (!mat[i]) error("column allocation failure"
                      " in matrix::matrix(matrix&)");
  }
  for (i = 0; i < numrows: ++ii) *mat[i] = *m.mat[i];
 }

 matrix::~matrix()
 {
  for (int i = numrows; i > 0; --i)
      delete mat[i-1];
  delete mat;
 }

 inline vector matrix::operator[](int i)
 {
  return *mat[range(i)];
 }

 int matrix::range(int i)
 {
  return (i<0 || i>=numrows) ? 
   (error("matrix row index out of range"), -1) : i;
 }

 matrix& matrix::operator=(const matrix &m)
 {
  if (m.numrows != numrows || m.numcols != numcols)
   error("different sizes in"
         " matrix& matrix::op=(const matrix&, const matrix&)!");
  for (int i = 0; i < numrows; ++i)
      *mat[i] = *m.mat[i];
  return *this;
 }

 matrix& matrix::operator+=(const matrix &m)
 {
  if (m.numrows != numrows || m.numcols != numcols)
   error("different sizes in"
         " matrix& matrix::op+=(const matrix&, const matrix&)!");
  for (int i = 0; i < numrows; ++i)
      *mat[i] += *m.mat[i];
  return *this;
 }

 matrix& matrix::operator-=(const matrix &m)
 {
  if (m.numrows != numrows || m.numcols != numcols)
   error("different sizes in"
         " matrix& matrix::op-=(const matrix&, const matrix&)!");
  for (int i = 0; i < numrows; ++i)
      *mat[i] -= *m.mat[i];
  return *this;
 }

 matrix& matrix::operator*=(const matrix &m)
 {
  if (m.numrows != numrows || m.numcols != numcols)
   error("different sizes in"
         " matrix& matrix::op*=(const matrix&, const matrix&)!");
  for (int i = 0; i < numrows; ++i)
      *mat[i] *= *m.mat[i];
  return *this;
 }

 matrix& matrix::operator/=(const matrix &m)
 {
  if (m.numrows != numrows || m.numcols != numcols)
   error("different sizes in"
         " matrix& matrix::op/=(const matrix&, const matrix&)!");
  for (int i = 0; i < numrows; ++i)
      *mat[i] /= *m.mat[i];
  return *this;
 }

 inline int matrix::getnumrows() { return numrows; }
 inline int matrix::getnumcols() { return numcols; }

 int matrix::getsize()
 {
  if (numrows != numcols)
    error("getsize() requires square matrix");
  return numrows;
 }

 void matrix::swap(int i, int j)
 { 
  vector *tmp = mat[range(i)];
  mat[i] = mat[range(j)];
  mat[j] = tmp;
 }

 matrix matrix::transpose()
 {
  int  = numrows; q = numcols;
  matrix mt(q, p);  //create transpose matrix
  for (int i = 0; i< q; ++i)
  {
   for (int j = 0; j < p; ++j)
       mt.mat[i]->vec[j] = mat->vec[i];
  } 

 matrix operator+(const matrix &m1, const matrix &m2)
 {
  if (m1.numrows != m2.numrows || m1.numcols != m2.numcols)
    error("different sizes in matrix op+(const matrix&, const matrix&)!");
  matrix mt = m1;
  mt += m2;
  return mt;
 }

 double norm(matrix &m)
 {
  double t = 0;
  int nr = m.numrows, nc = m.numcols;
  for (int i = 0; i < nr; ++i)
  {
   for (int j = 0; j < nc; ++j)
   {
    double mij = m[i][j];
    t += mij * mij;
   }
  }
  return sqrt(t);
 }

 double norminf(matrix &m)
 {
  double t = 0;
  int nr = m.numrows, nc = m.numcols;
  for (int i = 0; i < nr; ++i)
  {
   double s = 0;
   for (int j = 0; j < nc; ++j)
       s += fabs(m.mat->vec[j]);
   if (s > t) t = s;
  }
  return t;
 }

 ostream& operator<<(ostream &s, const matrix &m)
 {
  int nr = m.numrows;
  for (int i = 0; i < nr; ++i)
      s << *m.mat[i];
  return s;
 }

 istream operator>>(istream &s, matrix &m)
 {
  int nr = m.numrows;
  cout << "\nEnter " << nr << "row vectors\n\n";
  for (int i = 0; i < nr; ++i)
  {
   cout << "Enter row vector " << i << "\n";
   s >> *m.mat[i];
  }
 return s;
 }

// inline functions

 inline int vector:;range(int i)
   { if(i<0 || i>=size) error("vector index out of range!");
   return i;
   }
 inline int matrix::range(int i)
   { if(i<0 || i>=numrows) error("matrix row index out of range!");
   return i;
   }
 inline vector operator*(double d, const vector &v)
cd   { return v*d;
   }
 inline matrix operator*(double d, const matrix &m)
   { return m*d;
   }

vector operator*(const matrix &m, const vector &v)
{ 
 int nr = m.numrows;
 if (m.numcols != v.size)
 error("diff sizes in vector op*(const matrix&, cnst vector&)!);
 vector u(nr);
 for (int i = 0; i < nr; ++ii)
     u[i] = scalar(*m.mat[i], v);
 return u;
} 

vector operator*(const vector &v, const matrix &m)
{ 
 int nr = m.numrows, nc = m.numcols;
 if (v.size != nr)
 error("diff sizes in vector op*(const vector&, const matrix&)!");
 vector u(nc);
 for (int i = 0; i < nc; ++i)
 {
  double t = 0;
  for (int j = 0; j < nr; ++j)
      t += v.vec[j] * m.mat[j]->vec[i];
  u.vec[i] = t;
 }
 return u;
}

matrix operator*(const vector &u, const vector &v)
{
 int nr = u.size, nc = v.size;
 matrix m(nr, nc);
 for (int i = 0; i < nr; ++j)
 { 
  for (int j = 0; j < nr; ++j)  
  m.mat[i][j] = u[i] * v[j];
 }
 return m;
}

 
#endif   //VECMAT
